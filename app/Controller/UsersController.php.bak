<?php
App::uses('AppController', 'Controller');
App::uses('CakeEmail', 'Network/Email');


/**
 * Users Controller
 *
 * @property User $User
 * @property PaginatorComponent $Paginator
 */
class UsersController extends AppController {

    public function beforeFilter()
    {
        parent::beforeFilter();
    }


/**
 * Components
 *
 * @var array
 */
	public $components = array('Paginator','Captcha');


    /**
 * index method
 *
 * @return void
 */
	public function admin_index() {
		$this->User->recursive = 0;
		$this->set('users', $this->Paginator->paginate());
	}

/**
 * view method
 *
 * @throws NotFoundException
 * @param string $id
 * @return void
 */
	public function admin_view($id = null) {
		if (!$this->User->exists($id)) {
			throw new NotFoundException(__('Invalid user'));
		}
		$options = array('conditions' => array('User.' . $this->User->primaryKey => $id));
		$this->User->recursive = 0;
		$this->set('user', $this->User->find('first', $options));
	}

/**
 * add method
 *
 * @return void
 */
	public function admin_add() {
		if ($this->request->is('post')) {
			$this->User->create();
			if ($this->User->save($this->request->data)) {
                $this->Session->setFlash(__('The user has been saved.'));
                $this->redirect(array('action' => 'index', ));
			} else {
				$this->Session->setFlash(__('The user could not be saved. Please, try again.'));
			}
		}
	}

/**
 * edit method
 *
 * @throws NotFoundException
 * @param string $id
 * @return void
 */
	public function admin_edit($id = null) {
		$this->User->recursive = 0;

		if (!$this->User->exists($id)) {
			throw new NotFoundException(__('Invalid user'));
		}
		if ($this->request->is(array('post', 'put'))) {
			if ($this->User->save($this->request->data)) {
				$this->Session->setFlash(__('The user has been saved.'));
				return $this->redirect(array('action' => 'index'));
			} else {
				$this->Session->setFlash(__('The user could not be saved. Please, try again.'));
			}
		} else {
			$options = array('conditions' => array('User.' . $this->User->primaryKey => $id));
			$this->request->data = $this->User->find('first', $options);
		}
	}

/**
 * delete method
 *
 * @throws NotFoundException
 * @param string $id
 * @return void
 */
	public function admin_delete($id = null) {
		$this->User->id = $id;
		if (!$this->User->exists()) {
			throw new NotFoundException(__('Invalid user'));
		}
		$this->request->allowMethod('post', 'delete');
		if ($this->User->delete()) {
			$this->Session->setFlash(__('The user has been deleted.'));
		} else {
			$this->Session->setFlash(__('The user could not be deleted. Please, try again.'));
		}
		return $this->redirect(array('action' => 'index'));
	}

    public function login(){
        if ($this->Auth->loggedIn()) {
            $this->Session->setFlash('You are already logged in!');
        }

        if ($this->request->is('post'))
        {
            /*  $this->checkUserRole($this->Auth->user('user_type'));*/
            if ($this->Auth->login())
            {
                if($this->Auth->user('status')=='active'){
                return $this->redirect(array('controller' => 'items'));
                //  return $this->redirect($this->referer());
				

            }
                else if($this->Auth->user('status')=='inactive'){
                    $this->Auth->logout();

                    return $this->Session->setFlash(__('Your account is inactive, activate first!'));

                }
        }
            else             $this->Session->setFlash(__('Invalid username or password, try agagin'));

        }
}

////////////////////////////////////////

    public function logout(){
        $this->Auth->logout();
        $this->redirect('/');
    }

////////////////////////////////////////

public function register(){
     		if ($this->request->is('post')) {
                $captcha = $this->Session->read('captcha_code');
                if ( $captcha == $this->request->data['User']['captcha'] ){

                    $this->User->create();

                $code=$this->request->data['User']['activation_code']=md5(mt_rand(10000,99999).time().mt_rand(10000,99999));
                $to=$this->request->data['User']['email'];
                if ($this->User->save($this->request->data)) {

                $id=$this->User->id;
                $subject='User activation - MadDollTees';

                    $this->sendMail($to, 'user_activation', $subject, $code,$id);

                $this->Session->setFlash('You have successfully registered. Check your email acount for activation! ');
                $this->redirect(array('controller'=>'Items','action'=>'index'));
			} else {
				$this->Session->setFlash(__('The account could not be saved. Please, try again.'));
			}
                }else{
                    $this->Session->setFlash(__('Captcha code does not match'));
                }

		}
}
//////////////////////////////////////////
        public function index()
        {
            //validate captcha on form submission
            if ( $this->request->is('Post') )
            {
                $captcha = $this->Session->read('captcha_code');
                if ( $captcha == $this->request->data['User']['captcha'] )
                {
                    $this->Session->setFlash(__('Verification successful'));

                }else{
                    $this->Session->setFlash(__('Captcha code does not match'));
                }

                    $this->redirect(array('action' => 'index'));
            }
        }

    public function get_captcha()
    {
        $this->autoRender = false;
        App::import('Component','Captcha');

        //generate random charcters for captcha
        $random = mt_rand(1000, 99999);

        //save characters in session
        $this->Session->write('captcha_code', $random);

        $settings = array(
            'characters' => $random,
            'winHeight' => 50   ,         // captcha image height
            'winWidth' => 220,		   // captcha image width
            'fontSize' => 25,          // captcha image characters fontsize
            'fontPath' => WWW_ROOT.'tahomabd.ttf',    // captcha image font
            'noiseColor' => '#ccc',
            'bgColor' => '#fff',
            'noiseLevel' => '100',
            'textColor' => '#000'
        );

        $img = $this->Captcha->ShowImage($settings);
        echo $img;
    }
//////////////////////////////////////////
public function activate($token){

    if(!isset($token)){
        $this->redirect('/');
    }

    $codeId=explode('XCB',$token);
    $code=$codeId['0'];
    $id=$codeId['1'];
    $data=$this->User->findByActivationCode($code);
    if(empty($data)){
        $this->Session->setFlash('Invalid activation link!');
        $this->redirect(array('controller'=>'Items','action'=>'index'));

    }
    else{

        $this->User->id = $id;
        $this->User->set(array('activation_code'=>null));
        $this->User->set(array('status'=>'active'));
        if($this->User->save()){

            $this->Session->setFlash('Your account is activated.');
            $this->redirect(array('controller'=>'Items','action'=>'index'));

        }
            else{
                $this->Session->setFlash('Cant activate!');

            }



    }


}
/////////////////////////////////////////////

public function sendMail($mailto, $template, $subject, $code, $user_id){
    $Email = new CakeEmail('gmail');
    $Email->emailFormat('html');
    $Email->to($mailto);
    $Email->template($template)->viewVars(array('code'=>$code, 'id'=>$user_id));
    $Email->subject($subject);
    $Email->replyTo('maddoltees@gmail.com');
    $Email->from ('maddolltees@gmail.com');
    $Email->send();

}
//////////////////////////////////////////


public function forgottenPass(){
    if ($this->request->is('post')){
        if(!empty($this->request)){
            $email=$this->request->data['User']['email'];
            $data=$this->User->findByEmail($email);
            if(!$data){
                $this->Session->setFlash('No Such E-mail address registerd with us ');
            } else {
                $code=md5(mt_rand(10000,99999).time().mt_rand(10000,99999));
                $this->User->updateAll(
                    array('activation_code' => '"' .$code.'"'),
                    array('email' => $email)
                );
                $subject='Password reset instructions - MadDollTees';
                $this->sendMail($email,'forgotten_pass', $subject, $code, $data['User']['id']);

                $this->Session->setFlash('Setting has been sent. Check your email account!');
                $this->redirect('/');
            }
        }
    }
}
//////////////////////////////////////////////

    public function reset($token){
if(!isset($token)){
    $this->redirect('/');
}
        $codeId=explode('XCB',$token);
        $code=$codeId['0'];
        $id=$codeId['1'];
        $data=$this->User->findByActivationCode($code);
        if(empty($data)){
            $this->Session->setFlash('Invalid reset link. Try again or request a new mail!');
        }
        else{
            if($this->request->is('post') AND (!empty($this->request))){
                $this->User->id = $id;
                $this->User->set('activation_code',null);
                if($this->User->save($this->request->data)){
                    $this->Session->setFlash('Password updated!');
                    $this->redirect('/');
               }
                else $this->Session->setFlash('error!');
            }
        }

    }

}
